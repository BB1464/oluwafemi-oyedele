<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Oluwafemi Oyedele</title>
<link>https://bb1464.github.io/oluwafemi-oyedele/blog.html</link>
<atom:link href="https://bb1464.github.io/oluwafemi-oyedele/blog.xml" rel="self" type="application/rss+xml"/>
<description></description>
<image>
<url>https://bb1464.github.io/oluwafemi-oyedele/images/oluwafemi.jpg</url>
<title>Oluwafemi Oyedele</title>
<link>https://bb1464.github.io/oluwafemi-oyedele/blog.html</link>
</image>
<generator>quarto-1.4.549</generator>
<lastBuildDate>Sun, 02 Jun 2024 05:00:00 GMT</lastBuildDate>
<item>
  <title>Interaction bar plots with standard error and lettering in R</title>
  <dc:creator>Oluwafemi Oyedele</dc:creator>
  <link>https://bb1464.github.io/oluwafemi-oyedele/blogs/interaction-plot/interaction-plot-with-letters.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>In this blog post, we will go through the steps of quickly creating multiple bar plots with standard error and lettering using R. We will perform an Analysis of Variance (ANOVA) and a Least Significant Difference (LSD) test to understand the effects of different nitrogen (N) rates on rice. Finally, we will create visualizations to present the results. Let’s dive in!</p>
</section>
<section id="load-necessary-libraries" class="level1">
<h1>Load Necessary Libraries</h1>
<p>We begin by loading the required libraries. These libraries will help us with data manipulation, statistical analysis, and visualization.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyr)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(agricolae)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(reshape2)</span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(readxl)</span></code></pre></div>
</div>
</section>
<section id="import-the-data-set" class="level1">
<h1>Import the Data Set</h1>
<p>Next, we import the dataset from an Excel file named “data_rice.xlsx”. We display the first few rows and the column names to understand the structure of the data.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_excel</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">path =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data/data_rice.xlsx"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col_names =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 5
    rep Nrate             Heading Maturity Yield
  &lt;dbl&gt; &lt;chr&gt;               &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt;
1     1 Control (No Urea)    54.2     26.5  2.88
2     2 Control (No Urea)    78.3     27.0  3.03
3     3 Control (No Urea)    72.7     26.7  2.76
4     1 Urea 25 kg/ha        72.5     36.6  3.48
5     2 Urea 25 kg/ha        84.3     32.1  3.17
6     3 Urea 25 kg/ha        75.3     34.8  2.93</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "rep"      "Nrate"    "Heading"  "Maturity" "Yield"   </code></pre>
</div>
</div>
</section>
<section id="convert-variables-to-factors" class="level1">
<h1>Convert Variables to Factors</h1>
<p>We convert the columns rep and Nrate to factors because they represent categorical variables in our analysis. I will make use of the across function from dplyr</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb6-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.cols=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.fns=</span>factor))</span></code></pre></div>
</div>
</section>
<section id="view-the-new-structure-of-the-data" class="level1">
<h1>View the new structure of the data</h1>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tibble [15 × 5] (S3: tbl_df/tbl/data.frame)
 $ rep     : Factor w/ 3 levels "1","2","3": 1 2 3 1 2 3 1 2 3 1 ...
 $ Nrate   : Factor w/ 5 levels "Control (No Urea)",..: 1 1 1 3 3 3 4 4 4 5 ...
 $ Heading : num [1:15] 54.2 78.3 72.7 72.5 84.3 ...
 $ Maturity: num [1:15] 26.5 27 26.7 36.6 32.1 ...
 $ Yield   : num [1:15] 2.88 3.03 2.76 3.48 3.17 ...</code></pre>
</div>
</div>
</section>
<section id="define-response-variables" class="level1">
<h1>Define Response Variables</h1>
<p>We define response_vars as all columns from the third to the last column in the dataset. These columns represent different growth and yield characteristics.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">response_vars <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colnames</span>(df)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ncol</span>(df)]</span></code></pre></div>
</div>
</section>
<section id="analysis-of-variance-anova" class="level1">
<h1>Analysis of Variance (ANOVA)</h1>
<p>We are performing ANOVA (Analysis of Variance) for multiple response variables stored in a list called response_vars. We first initialize an empty list called anova_result to store the ANOVA results for each response variable. The code then iterates over each response variable in response_vars. If a response variable contains a space in its name, it is wrapped in backticks to ensure it is correctly interpreted within the formula.</p>
<p>A formula is then dynamically constructed for each response variable, where the response variable is modeled as a function of two factors: “rep” and “Nrate”. This formula is passed to the aov function, which performs the ANOVA using the data frame df. The resulting ANOVA object is stored in the anova_result list, with the response variable name as the key. For each response variable, the code prints a message indicating that ANOVA is being performed, followed by the summary of the ANOVA results. This process allows us to systematically conduct and review ANOVA for multiple response variables in a dataset.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">anova_result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>()</span>
<span id="cb10-2"></span>
<span id="cb10-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> response_vars) {</span>
<span id="cb10-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grepl</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>, i)) {</span>
<span id="cb10-5">    i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"`"</span>, i, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"`"</span>)</span>
<span id="cb10-6">  }</span>
<span id="cb10-7">  formula <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.formula</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(i, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rep"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"+"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Nrate"</span>))</span>
<span id="cb10-8">  anova_result[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aov</span>(formula, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> df)</span>
<span id="cb10-9">  </span>
<span id="cb10-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ANOVA for"</span>, i))</span>
<span id="cb10-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(anova_result[[i]]))</span>
<span id="cb10-12">}</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "ANOVA for Heading"
            Df Sum Sq Mean Sq F value Pr(&gt;F)  
rep          2  345.8  172.88   3.147 0.0981 .
Nrate        4 1211.6  302.90   5.514 0.0198 *
Residuals    8  439.5   54.94                 
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
[1] "ANOVA for Maturity"
            Df Sum Sq Mean Sq F value  Pr(&gt;F)   
rep          2   26.2   13.08   1.456 0.28879   
Nrate        4  507.3  126.82  14.126 0.00107 **
Residuals    8   71.8    8.98                   
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
[1] "ANOVA for Yield"
            Df Sum Sq Mean Sq F value  Pr(&gt;F)   
rep          2  0.160  0.0802   0.377 0.69737   
Nrate        4  7.487  1.8716   8.801 0.00501 **
Residuals    8  1.701  0.2127                   
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1</code></pre>
</div>
</div>
</section>
<section id="least-significant-difference-lsd-test" class="level1">
<h1>Least Significant Difference (LSD) Test</h1>
<p>Then we conducted post-hoc analysis using the Least Significant Difference (LSD) test for multiple response variables stored in response_vars. We first initialize an empty list called lsd_result to store the LSD test results for each response variable. The code iterates over each response variable in response_vars, and if a variable’s name contains a space, it is enclosed in backticks to ensure it is correctly processed. For each response variable, the LSD test is performed using the corresponding ANOVA result from the previously stored anova_result list, focusing on the treatment factor “Nrate” with a significance level (alpha) of 0.05. The test results, including means and groups, are then merged into a single data frame.</p>
<p>The standard error (SE) for each response variable is calculated by dividing the standard deviation by the square root of the number of replicates. The resulting data frame is stored in the lsd_result list, with each data frame’s column containing the response variable values, means, groups, and standard errors. The column name for the response variable is standardized to “response”. Finally, the results for each response variable are printed. This process ensures a detailed post-hoc analysis following ANOVA, allowing for a clear comparison of treatment means.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">lsd_result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>()</span>
<span id="cb12-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> response_vars) {</span>
<span id="cb12-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grepl</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>, i)) {</span>
<span id="cb12-4">    i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"`"</span>, i, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"`"</span>)</span>
<span id="cb12-5">  }</span>
<span id="cb12-6">  lsd_result[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LSD.test</span>(anova_result[[i]], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">trt =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Nrate"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>)</span>
<span id="cb12-7">  lsd_result[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">merge</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> lsd_result[[i]]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>means[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> lsd_result[[i]]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>groups[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by.x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"row.names"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by.y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"row.names"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">all.x =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb12-8">  lsd_result[[i]]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>SE <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> lsd_result[[i]]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>std <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>(lsd_result[[i]]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>r)</span>
<span id="cb12-9">  lsd_result[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(lsd_result[[i]])</span>
<span id="cb12-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colnames</span>(lsd_result[[i]])[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"response"</span></span>
<span id="cb12-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(lsd_result[[i]])</span>
<span id="cb12-12">}</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>          Row.names response       std r groups       SE
1 Control (No Urea) 68.44509 12.609047 3      c 7.279837
2    Urea 100 kg/ha 87.97074  5.763612 3     ab 3.327623
3     Urea 25 kg/ha 77.39595  6.182959 3     bc 3.569733
4     Urea 50 kg/ha 80.05120  4.757606 3     bc 2.746805
5     Urea 75 kg/ha 94.64645 11.813072 3      a 6.820281
          Row.names response       std r groups        SE
1 Control (No Urea) 26.74720 0.2452797 3      d 0.1416123
2    Urea 100 kg/ha 39.30555 3.5689391 3     ab 2.0605280
3     Urea 25 kg/ha 34.49546 2.2648864 3     bc 1.3076328
4     Urea 50 kg/ha 33.48755 5.2644154 3      c 3.0394116
5     Urea 75 kg/ha 44.04475 1.8292321 3      a 1.0561076
          Row.names response       std r groups         SE
1 Control (No Urea) 2.890565 0.1376631 3      b 0.07947983
2    Urea 100 kg/ha 2.710516 0.3322514 3      b 0.19182546
3     Urea 25 kg/ha 3.191620 0.2721221 3      b 0.15710978
4     Urea 50 kg/ha 2.861858 0.7981537 3      b 0.46081427
5     Urea 75 kg/ha 4.636202 0.3007376 3      a 0.17363091</code></pre>
</div>
</div>
</section>
<section id="prepare-data-for-plotting" class="level1">
<h1>Prepare Data for Plotting</h1>
<p>Next, we are combining the results of the LSD tests for multiple response variables into a single data frame for further analysis or visualization. First, we use do.call() to merge all individual data frames stored in lsd_result into one large data frame called combined_df. We then add a new column, variables, to combined_df to store the row names, which represent the response variable names. The original row names are subsequently removed using rownames(combined_df) &lt;- NULL. The first column of combined_df is renamed to “Nrate” to reflect the treatment levels.</p>
<p>Next, we clean up the variables column by removing any characters following a period (.) using sub() function, which simplifies the variable names. Additionally, backticks are removed from the variable names using gsub() function.</p>
<p>Finally, the Nrate column is converted to a factor with specific levels to ensure that the treatment levels are ordered meaningfully: “Control (No Urea)”, “Urea 25 kg/ha”, “Urea 50 kg/ha”, “Urea 75 kg/ha”, and “Urea 100 kg/ha”. This transformation facilitates easier plotting and interpretation of the results. The resulting combined_df contains the LSD test results for all response variables, with standardized treatment levels and cleaned variable names, ready for further analysis.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">combined_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">do.call</span>(rbind, lsd_result)</span>
<span id="cb14-2">combined_df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>variables <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(combined_df)</span>
<span id="cb14-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(combined_df) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span>
<span id="cb14-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colnames</span>(combined_df)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Nrate"</span></span>
<span id="cb14-5">combined_df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>variables <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sub</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">..*"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, combined_df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>variables)</span>
<span id="cb14-6">combined_df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>variables <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gsub</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"`"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, combined_df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>variables)</span>
<span id="cb14-7">combined_df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Nrate <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(combined_df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Nrate, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">levels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb14-8">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Control (No Urea)"</span>,</span>
<span id="cb14-9">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Urea 25 kg/ha"</span>,</span>
<span id="cb14-10">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Urea 50 kg/ha"</span>,</span>
<span id="cb14-11">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Urea 75 kg/ha"</span>,</span>
<span id="cb14-12">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Urea 100 kg/ha"</span></span>
<span id="cb14-13">))</span></code></pre></div>
</div>
</section>
<section id="create-the-bar-plot" class="level1">
<h1>Create the Bar Plot</h1>
<p>Next, we created a detailed and customized bar plot using the ggplot2 package to visualize the results of the LSD tests for different response variables. The code plots the combined_df data frame, specifically the rows where variables match the names in response_vars.</p>
<p>Setting up the plot: The ggplot function initializes the plot with the data filtered to include only the relevant response variables. The aes function sets up the aesthetic mappings, specifying Nrate on the x-axis, response on the y-axis, and filling the bars based on Nrate. Adding bars: The geom_bar function creates bar plots with the specified aesthetics, drawing bars with black borders and setting their position to dodge each other for clarity. The width of the bars is set to 0.9. Adding error bars: The geom_errorbar function adds error bars to each bar, representing the standard error (SE). The error bars are positioned to align with the bars and have a width of 0.10. Adding text labels: The geom_text function adds text labels above each bar, displaying the group labels. The labels are positioned slightly above the error bars for better visibility. Customizing labels and theme: The labs function sets empty titles and labels for the x-axis and fill legend, while the y-axis label is set to “Growth and yield characteristics”. The theme function customizes the axis text to rotate the x-axis labels by 45 degrees for better readability and sets other aesthetic elements like legend position, strip placement, and panel spacing. Faceting: The facet_wrap function splits the plot into multiple panels, one for each response variable. Each panel has its own y-axis scale and is arranged in a single column. Further customization: The plot’s theme is further customized to remove major and minor grid lines, set the panel background to blank, and ensure the axis lines are clearly visible. The scale_y_continuous function ensures the y-axis scales appropriately with a slight expansion for better spacing. Customizing fill colors: The scale_fill_manual function applies a specific color palette from the ggsci package, using the “Journal of Clinical Oncology” (JCO) color palette for the bars. This comprehensive code creates a clear, well-labeled, and aesthetically pleasing visualization of the LSD test results, making it easy to compare the effects of different Nrate treatments on various response variables.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">plot <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(combined_df[combined_df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>variables <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> response_vars, ],</span>
<span id="cb15-2">                <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(Nrate),</span>
<span id="cb15-3">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> response,</span>
<span id="cb15-4">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(Nrate))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb15-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_bar</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stat =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"identity"</span>,</span>
<span id="cb15-6">           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>,</span>
<span id="cb15-7">           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">position =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">position_dodge</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>),</span>
<span id="cb15-8">           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb15-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_errorbar</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymin =</span> response <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> SE,</span>
<span id="cb15-10">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymax =</span> response <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> SE),</span>
<span id="cb15-11">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">position =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">position_dodge</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span>),</span>
<span id="cb15-12">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.10</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb15-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_text</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> Nrate,</span>
<span id="cb15-14">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> response <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> SE,</span>
<span id="cb15-15">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.matrix</span>(groups)),</span>
<span id="cb15-16">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">position =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">position_dodge</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span>),</span>
<span id="cb15-17">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vjust =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>,</span>
<span id="cb15-18">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hjust =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb15-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>,</span>
<span id="cb15-20">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>,</span>
<span id="cb15-21">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Growth and yield characteristics"</span>,</span>
<span id="cb15-22">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb15-23">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.text.x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">angle =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hjust =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb15-24">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">facets =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>variables,</span>
<span id="cb15-25">             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb15-26">             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scales =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"free_y"</span>,</span>
<span id="cb15-27">             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">switch =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb15-28">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"right"</span>,</span>
<span id="cb15-29">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">strip.placement =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"outside"</span>,</span>
<span id="cb15-30">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">strip.background =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>(),</span>
<span id="cb15-31">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">panel.spacing =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unit</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lines"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb15-32">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expansion</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mult =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb15-33">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">panel.grid.major =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>(),</span>
<span id="cb15-34">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">panel.grid.minor =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>(),</span>
<span id="cb15-35">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">panel.background =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>(),</span>
<span id="cb15-36">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.line.y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_line</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>),</span>
<span id="cb15-37">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.line.x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_line</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb15-38">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_fill_manual</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values =</span> ggsci<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pal_jco</span>()(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb15-39"></span>
<span id="cb15-40">plot</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://bb1464.github.io/oluwafemi-oyedele/blogs/interaction-plot/interaction-plot-with-letters_files/figure-html/unnamed-chunk-10-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="customize-labels-and-update-plot" class="level1">
<h1>Customize Labels and Update Plot</h1>
<p>Then we defined a custom labeller using the as_labeller function from the ggplot2 package to create more descriptive and formatted facet labels for our plot. The custom labeller is created as a named vector that maps the original variable names to more detailed and readable labels. Specifically, the custom_labeller object associates:</p>
<ul>
<li><p>“Heading” with the label “Heading~(days)”</p></li>
<li><p>“Maturity” with the label “Maturity~(days)”</p></li>
<li><p>“Yield” with the label “Yield<sub>(t</sub>ha^{-1})”</p></li>
</ul>
<p>The label_parsed argument is used to ensure that the labels are parsed as expressions, allowing the inclusion of mathematical notation and formatting in the labels. For example, t~ha^{-1} represents tons per hectare with appropriate superscripting. These custom labels enhance the readability and presentation quality of the facet labels in the ggplot, making the plot more informative and visually appealing.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">custom_labeller <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_labeller</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb16-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Heading =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Heading~(days)"</span>,</span>
<span id="cb16-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Maturity =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Maturity~(days)"</span>,</span>
<span id="cb16-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Yield =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Yield~(t~ha^{-1})"</span></span>
<span id="cb16-5">), label_parsed)</span></code></pre></div>
</div>
<p>Finally, we customize the facet labels for better readability and update the plot accordingly. We updated the labels in facet_wrap() function to use the above modified labels. We display the updated plot using the below code.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">plot <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">facets =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>variables, </span>
<span id="cb17-2">                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, </span>
<span id="cb17-3">                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scales =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"free_y"</span>, </span>
<span id="cb17-4">                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">switch =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, </span>
<span id="cb17-5">                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labeller =</span> custom_labeller)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://bb1464.github.io/oluwafemi-oyedele/blogs/interaction-plot/interaction-plot-with-letters_files/figure-html/unnamed-chunk-12-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>


</section>

 ]]></description>
  <category>123</category>
  <category>Second Tag</category>
  <guid>https://bb1464.github.io/oluwafemi-oyedele/blogs/interaction-plot/interaction-plot-with-letters.html</guid>
  <pubDate>Sun, 02 Jun 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Introduction to TidyModel in R</title>
  <dc:creator>Oluwafemi Oyedele</dc:creator>
  <link>https://bb1464.github.io/oluwafemi-oyedele/blogs/intro-to-tidymodel/intro-to-tidymodels.html</link>
  <description><![CDATA[ 




<section id="basic-introduction-to-tidymodels-using-r" class="level2">
<h2 class="anchored" data-anchor-id="basic-introduction-to-tidymodels-using-r">Basic Introduction to Tidymodels using R</h2>
<p>In this blog post, we will explore <strong>Tidymodels</strong>, a collection of packages for modeling and machine learning using R. This is part of what I learnt in the R for Data Science online Learning Community.</p>
</section>
<section id="what-is-tidymodels" class="level2">
<h2 class="anchored" data-anchor-id="what-is-tidymodels">What is Tidymodels?</h2>
<p>Tidymodels is a suite of packages that provides a consistent and flexible approach to modeling in R. It is part of the tidyverse, an ecosystem of R packages designed for data science.</p>
</section>
<section id="installing-tidymodels" class="level2">
<h2 class="anchored" data-anchor-id="installing-tidymodels">Installing Tidymodels</h2>
<p>To install Tidymodels, you can use the <code>install.packages()</code> function in R.</p>
</section>
<section id="basic-usage-of-tidymodels" class="level2">
<h2 class="anchored" data-anchor-id="basic-usage-of-tidymodels">Basic Usage of Tidymodels</h2>
<p>Let’s go through a simple example of using Tidymodels for linear regression.</p>
<section id="loading-the-necessary-libraries" class="level3">
<h3 class="anchored" data-anchor-id="loading-the-necessary-libraries">Loading the necessary libraries</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidymodels)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tidymodels_prefer</span>()</span></code></pre></div>
</div>
</section>
<section id="preparing-the-data" class="level3">
<h3 class="anchored" data-anchor-id="preparing-the-data">Preparing the data</h3>
<p>For this example, we’ll use the <code>mtcars</code> dataset that comes with R. Let’s split this data into a training set and a testing set.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(mtcars)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For reproducibility</span></span>
<span id="cb2-3"></span>
<span id="cb2-4">car_split <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">initial_split</span>(mtcars, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prop =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.75</span>)</span>
<span id="cb2-5"></span>
<span id="cb2-6">car_train <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">training</span>(car_split)</span>
<span id="cb2-7"></span>
<span id="cb2-8">car_test <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">testing</span>(car_split)</span></code></pre></div>
</div>
</section>
<section id="building-the-model" class="level3">
<h3 class="anchored" data-anchor-id="building-the-model">Building the model</h3>
<p>We’ll try to predict miles per gallon (<code>mpg</code>) based on the other variables in the dataset. First, let’s specify our model:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">lm_spec <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">linear_reg</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_engine</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lm"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_mode</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"regression"</span>)</span></code></pre></div>
</div>
<p>Next, let’s fit our model to the training data:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">lm_fit <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> lm_spec <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fit</span>(mpg <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> ., <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> car_train)</span></code></pre></div>
</div>
<p>We can now use this model to make predictions on the test data:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">predictions <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> lm_fit <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">predict</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">new_data =</span> car_test)</span>
<span id="cb5-3"></span>
<span id="cb5-4"></span>
<span id="cb5-5">predictions <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> car_test <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb5-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(mpg) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb5-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_cols</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">predict</span>(lm_fit, car_test))</span>
<span id="cb5-8"></span>
<span id="cb5-9">predictions</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>                     mpg    .pred
Mazda RX4 Wag       21.0 21.71246
Valiant             18.1 20.64933
Merc 450SE          16.4 12.94019
Merc 450SL          17.3 14.67981
Lincoln Continental 10.4 10.79525
Toyota Corona       21.5 25.01139
Camaro Z28          13.3 13.08460
Pontiac Firebird    19.2 16.27870</code></pre>
</div>
</div>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>In this post, we have introduced <strong>Tidymodels</strong>, a powerful tool for modeling in R. We have seen how to <strong>install and use Tidymodels</strong>, and how it integrates with the tidyverse ecosystem. With Tidymodels, you can streamline your modeling workflow and make it more consistent and reproducible. In my next blog post I will explain how to tune hyper-parameters and also how to perform cross validation.</p>


</section>

 ]]></description>
  <category>123</category>
  <category>Second Tag</category>
  <guid>https://bb1464.github.io/oluwafemi-oyedele/blogs/intro-to-tidymodel/intro-to-tidymodels.html</guid>
  <pubDate>Wed, 08 Nov 2023 06:00:00 GMT</pubDate>
</item>
<item>
  <title>Functional Programming with Purrr</title>
  <dc:creator>Oluwafemi Oyedele</dc:creator>
  <link>https://bb1464.github.io/oluwafemi-oyedele/blogs/funtionalProgramming/functions.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>When you have a lot of variables and need to make multiple exploratory plots it’s usually worthwhile to automate the process in R instead of manually copying and pasting code for every plot, this thing happen to me a lot but when I read Hadley Wickham <code>Advance R</code> on <code>functional programming</code>, I knew that what I was doing was wrong. However, the coding approach needed to automate plots can look pretty daunting to a beginner R user. It can look so daunting, in fact, that it can appear easier to manually make the plots (like in Excel) rather than using R at all.</p>
<p>Unfortunately making plots manually can backfire. The efficiency of using a software program you already know is quickly out-weighed by being unable to easily reproduce the plots when needed. I know I invariably have to re-make even exploratory plots, and it’d be a bummer if I had to remake them all manually rather than re-running some code.</p>
<p>So while I often assure students working under time constraints that it is perfectly OK to use software they already know rather than spending the time to learn how to do something in R, making many plots is a special case. To get them started I will provide students who need to automate plotting in R some example code (with explanation).</p>
<p>This post is based on an example that involves plotting bivariate relationships between many continuous variables.</p>
<section id="load-r-packages" class="level2">
<h2 class="anchored" data-anchor-id="load-r-packages">Load R packages</h2>
<section id="load-the-necessary-library" class="level3">
<h3 class="anchored" data-anchor-id="load-the-necessary-library">Load the necessary library</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(purrr)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(cowplot)</span></code></pre></div>
</div>
<p>I’ll be plotting with ggplot2 and looping with purrr package. I’ll also be using package <code>cowplot</code> later to combine individual plots into one, but will use the package functions via my name space <code>cowplot::</code> instead of loading the package.</p>
</section>
<section id="the-set-up" class="level3">
<h3 class="anchored" data-anchor-id="the-set-up">The set-up</h3>
<p>Here I’m going to make an example dataset with 3 response (y) variables and 4 explanatory (x) variables for plotting.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>)</span>
<span id="cb2-2">dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">elev =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>( <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb2-3">                 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">resp =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>( <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb2-4">                 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">grad =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>( <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb2-5">                 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">slp =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>( <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">35</span>),<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb2-6">                 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lat =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">44.5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>),</span>
<span id="cb2-7">                 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">long =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">122.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">123.1</span>),</span>
<span id="cb2-8">                 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nt =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rpois</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lambda =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>) )</span>
<span id="cb2-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(dat)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   elev resp grad  slp      lat     long nt
1 373.2  9.7 0.05  8.8 44.54626 122.8547 18
2 197.6  8.1 0.42 33.3 44.79495 122.5471 26
3 280.0  5.4 0.38 19.3 44.99027 122.9645 18
4 191.8  4.3 0.07 29.6 44.95022 122.7290 19
5 445.4  2.3 0.43 16.5 44.79784 122.9836 15
6 224.5  6.5 0.78  4.1 44.96576 122.9836 21</code></pre>
</div>
</div>
<p>The goal is to make scatter plots for every response variable vs every explanatory variable. I’ve deemed the first three variables in the data set to be the response variables (elev, resp, grad). The plan is to loop through the variables and make the desired plots. I’m going to use vectors of the variable names for this, one vector for the response variables and one for the explanatory variables. If all of your response or explanatory variables share some unique pattern in the variable names there are some clever ways to pull out the names with some of the select helper functions in dplyr::select(). My variable names are all unique. My options are to either write the vectors out manually or pull the names out by index. I’ll do the latter since the different types of variables are grouped together.</p>
</section>
</section>
</section>
<section id="set-the-names" class="level1">
<h1>Set the names</h1>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">response <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(dat)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span>
<span id="cb4-2">expl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(dat)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>]</span></code></pre></div>
</div>
<p>When I know I’m going to be looping through character vectors I like to use named vectors. This helps me keep track of things in the output. The set_names() function in purrr is super handy for naming character vectors, since it can use the values of the vector as names (i.e., the vector will be named by itself). (I don’t recommend trying this with lists of data.frames like I have in the past, though, since it turns out that naming a data.frame with a data.frame isn’t so useful.)</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">response <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_names</span>(response)</span>
<span id="cb5-2">response</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  elev   resp   grad 
"elev" "resp" "grad" </code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">expl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_names</span>(expl)</span>
<span id="cb7-2">expl</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   slp    lat   long     nt 
 "slp"  "lat" "long"   "nt" </code></pre>
</div>
</div>
<section id="create-a-plotting-function" class="level3">
<h3 class="anchored" data-anchor-id="create-a-plotting-function">Create a plotting function</h3>
<p>Since I’m going to make a bunch of plots that will all have the same basic form, I will make a plotting function. I am going to make a function where only the x and y variables can vary (so are arguments to the function). Since I’m making a function to plot variables from a single data set I’m going to hard-code the data set into the function. If you have multiple data sets or you are making a function for use across projects you’ll probably want to add the data set as a function argument. My functions inputs are based on the variable names, so I need to pass strings into the ggplot2 functions. Strings cannot be used directly in <code>aes()</code>, but can be used with the .data pronoun. I’m making pretty basic graphs since these are exploratory plots, not publication-ready plots. I will make a <code>scatter plot</code> and add locally weighted regression <code>(loess)</code> lines via <code>geom_smooth()</code>. I use such lines with great caution, as it can be easy to get too attached any pattern the <code>loess</code> line shows.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">scatter_fun <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, y) {</span>
<span id="cb9-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data=</span>dat, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> .data[[x]], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> .data[[y]])) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_smooth</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"loess"</span>,</span>
<span id="cb9-5">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">se =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,</span>
<span id="cb9-6">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grey74"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(</span>
<span id="cb9-7">                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">panel.grid.major =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>(),</span>
<span id="cb9-8">                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">panel.grid.minor =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>(),</span>
<span id="cb9-9">                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">panel.background =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>(),</span>
<span id="cb9-10">                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.line =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_line</span>()</span>
<span id="cb9-11">                )</span>
<span id="cb9-12">}</span></code></pre></div>
</div>
</section>
<section id="heres-an-example-of-the-function-output-passing-in-x-and-y-as-strings." class="level3">
<h3 class="anchored" data-anchor-id="heres-an-example-of-the-function-output-passing-in-x-and-y-as-strings.">Here’s an example of the function output, passing in x and y as strings.</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scatter_fun</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lat"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"elev"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://bb1464.github.io/oluwafemi-oyedele/blogs/funtionalProgramming/functions_files/figure-html/unnamed-chunk-6-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="looping-through-one-vector-of-variables" class="level3">
<h3 class="anchored" data-anchor-id="looping-through-one-vector-of-variables">Looping through one vector of variables</h3>
<p>One way to make all the plots I want is to loop through each explanatory variable for a fixed response variable. With this approach I would need a separate loop for each response variable.</p>
</section>
<section id="here-i-will-use-the-map-function-from-purrr-package-for-looping." class="level3">
<h3 class="anchored" data-anchor-id="here-i-will-use-the-map-function-from-purrr-package-for-looping.">Here I will use the map function from purrr package for looping.</h3>
<p>I pass each explanatory variable to the first argument in scatter_fun() and I fix the second argument to “elev”. I use the formula coding in map() and so refer to the element of the explanatory vector via .x within scatter_fun().</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">elev_plots <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> expl, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scatter_fun</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> .x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"elev"</span>) )</span></code></pre></div>
</div>
<p>The output is a list of 4 plots (since there are 4 explanatory variables). You’ll notice that each element of the list has the variable name associated with it. This is why I used set_names() earlier, since this is convenient for printing the plots and, you’ll see later, is convenient when saving the plots in files with understandable names.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">elev_plots</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$slp</code></pre>
</div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://bb1464.github.io/oluwafemi-oyedele/blogs/funtionalProgramming/functions_files/figure-html/unnamed-chunk-8-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>
$lat</code></pre>
</div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://bb1464.github.io/oluwafemi-oyedele/blogs/funtionalProgramming/functions_files/figure-html/unnamed-chunk-8-2.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>
$long</code></pre>
</div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://bb1464.github.io/oluwafemi-oyedele/blogs/funtionalProgramming/functions_files/figure-html/unnamed-chunk-8-3.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>
$nt</code></pre>
</div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://bb1464.github.io/oluwafemi-oyedele/blogs/funtionalProgramming/functions_files/figure-html/unnamed-chunk-8-4.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="looping-through-both-vectors" class="level3">
<h3 class="anchored" data-anchor-id="looping-through-both-vectors">Looping through both vectors</h3>
<p>For only a few response variables we could easily copy and paste the code above, changing the hard-coded response variable each time. This process can get burdensome if there are a lot of response variables, though. Using a <code>nested loop</code> is another option which involve looping through both vectors of variables to make all the plots at once. Because we want a plot for each combination of variables, this is a job for a nested loop. This means <code>one map() loop</code> will be <code>nested inside another</code>. <code>I will refer to the first map() loop as the outer loop</code> and <code>the second one as the inner loop</code>. I’m going to run through the response variables in the outer loop and the explanatory variables in the inner loop. That way I can graph all of the explanatory variables for each response variable before moving on to the next response variable. <code>This puts the output, a nested list</code>, in a logical order. <code>A nested loop involves more complicated code</code>. It took some effort for me to wrap my head around how to refer to the list element from the outer loop within the inner loop when using the map() formula coding with the tilde <code>(~)</code>. I found the answers/comments to this question on Stack Overflow to be helpful. Since my scatter plot function is so simple I ended up using formula coding for the outer loop and the function as in the inner loop. The inner list elements are fed to the first argument of scatter_fun() by default, which works out great since the first argument is the x variable and the inner loop loops through the explanatory variables. The .x then refers to the outer list elements (the response variable names), and is passed to the y argument of the function in the inner loop.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">all_plots <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> response,</span>
<span id="cb17-2">                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> expl, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> scatter_fun, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> .x))</span></code></pre></div>
</div>
<p>To be honest, I think it is fairly hard to follow what the above code is doing. And I’ve found it difficult to use such an approach if adding additional nested loops. At the end of the day, using anonymous functions involves more code but the results may be easier to understand. Well, as easy to follow as nested loops ever are. Here’s the same plots using anonymous functions in each map() loop.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">all_plots2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(response, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(resp) {</span>
<span id="cb18-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(expl, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(expl) {</span>
<span id="cb18-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scatter_fun</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> expl, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> resp)</span>
<span id="cb18-4">  })</span>
<span id="cb18-5">})</span></code></pre></div>
</div>
<p>The output is a list of lists. Each sub-list contains all the plots for a single response variable. Because I set the names for both vectors of variable names, the inner and outer lists both have names. These names can be used to pull out individual plots. For example, if I want to see all the plots for the grad response variable I can print that sub-list by name. (I’m going to display only two of four grad plots here to save space.)</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">all_plots<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>grad[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$slp</code></pre>
</div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://bb1464.github.io/oluwafemi-oyedele/blogs/funtionalProgramming/functions_files/figure-html/unnamed-chunk-11-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>
$lat</code></pre>
</div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://bb1464.github.io/oluwafemi-oyedele/blogs/funtionalProgramming/functions_files/figure-html/unnamed-chunk-11-2.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>If I want to print a single plot, I can first extract one of the sub-lists using an outer list name and then extract the individual plot via an inner list name.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">all_plots<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>grad<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>long</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://bb1464.github.io/oluwafemi-oyedele/blogs/funtionalProgramming/functions_files/figure-html/unnamed-chunk-12-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>I find the names convenient, but you can also extract plots via position. Here’s the same graph, the third element of the third list.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">all_plots[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]][[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]]</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://bb1464.github.io/oluwafemi-oyedele/blogs/funtionalProgramming/functions_files/figure-html/unnamed-chunk-13-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="combining-variables-for-a-single-loop" class="level3">
<h3 class="anchored" data-anchor-id="combining-variables-for-a-single-loop">Combining variables for a single loop</h3>
<p>Since nested loops can be complicated, another option is to create all combinations of the two input vectors and then loop through the vectors in a single loop. This can be done, for example, using <code>tidyr::expand_grid()</code>. The main thing I like about <code>tidyr::expand_grid()</code> over <code>expand.grid()</code> from base R is the order of the output. Both put the results into a data set (data.frame or tibble). Here’s how that would look, putting the response variables first to match the output order above. I’m using <code>tidyr version 1.1.4</code> here.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">resp_expl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span>  tidyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expand_grid</span>(expl,response)</span>
<span id="cb24-2">resp_expl</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 12 × 2
   expl  response
   &lt;chr&gt; &lt;chr&gt;   
 1 slp   elev    
 2 slp   resp    
 3 slp   grad    
 4 lat   elev    
 5 lat   resp    
 6 lat   grad    
 7 long  elev    
 8 long  resp    
 9 long  grad    
10 nt    elev    
11 nt    resp    
12 nt    grad    </code></pre>
</div>
</div>
<p>I can now use <code>pmap()</code> from purrr to loop through the rows of this tibble. I have to be careful with my argument order, though, since I have the y variable first in the tibble but it is the second argument in my function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1">allplots2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pmap</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.l =</span> resp_expl, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scatter_fun</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> .x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> .y) )</span></code></pre></div>
</div>
<p>I’m not going to print them here, but one minor downside of this approach is that only the first variable name is carried along to the output list. If I wanted to save these plots separately and use both the response and explanatory variable in the file name I’d need to create the file names based on <code>resp_expl</code>. I won’t show this in the next section on saving plots, so here is a quick example of creating basic file names based on both variables.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1">allplots2_names <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pmap</span>(resp_expl, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(.x, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>, .y, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".png"</span>))</span>
<span id="cb27-2">allplots2_names[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$slp
[1] "slp_elev.png"

$slp
[1] "slp_resp.png"</code></pre>
</div>
</div>
</section>
<section id="saving-the-plots" class="level3">
<h3 class="anchored" data-anchor-id="saving-the-plots">Saving the plots</h3>
<p>Once all the graphs are made we can look at them in R by printing the list or parts of the list as above. But if you want to peruse them at your leisure later or send them to a collaborator you’ll want to save them outside of R.</p>
<p>This next section is dedicated to exploring some of the ways you can do this.</p>
</section>
<section id="saving-all-plots-to-one-pdf" class="level3">
<h3 class="anchored" data-anchor-id="saving-all-plots-to-one-pdf">Saving all plots to one PDF</h3>
<p>If you want to save every plot as a separate page in a PDF, you can do so with the pdf() function. The code below shows an example of how this works. First, a graphics device to save the plots into is created and given a name via pdf(). Then all the plots are put into that device. Finally, the device is turned off with dev.off(). The last step is important, as you can’t open the file until the device is turned off.</p>
<p>This is a pretty coarse way to save everything, but it allows you to easily page through all the plots. I’ve used this method when I had many exploratory plots for a single response variable that I wanted to share with collaborators.</p>
</section>
<section id="in-this-example-code-i-save-the-file-which-i-name-all_scatterplots.pdf-into-my-current-working-directory." class="level3">
<h3 class="anchored" data-anchor-id="in-this-example-code-i-save-the-file-which-i-name-all_scatterplots.pdf-into-my-current-working-directory.">In this example code I save the file, which I name all_scatterplots.pdf, into my current working directory.</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pdf</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"all_scatterplots.pdf"</span>)</span></code></pre></div>
</div>
</section>
<section id="saving-groups-of-plots-together" class="level3">
<h3 class="anchored" data-anchor-id="saving-groups-of-plots-together">Saving groups of plots together</h3>
<p>Another option is to save each group of plots in a separate document. This might make sense in a case like this where there are a set of plots for each response variable and we might want a separate file for each set. To save each sub-list separately we’ll need to loop through all_plots and save the plots for each response variable into a separate file. The list names can be used in the file names to keep the output organized. The functions in purrr that start with i are special functions that loop through a list and the names of that list simultaneously. This is useful here where we want to use the list names to identify the output files while we save them. The <code>walk()</code> function is part of the map family, to be used when you want a function for its side effect instead of for a return value. Saving plots is a classic example of when we want <code>walk()</code> instead of <code>map()</code>. Combining the i and the walk gives us the <code>iwalk()</code> function. In the formula interface, .x refers to the list elements and .y refers to the names of the list. You can see I create the plot file names using the list name combined with “scatter plots.pdf”, using _ as the separator. The code below makes three files, one for each response variable, with four plots each. The files are named “elev_scatter plots.pdf”, “resp_scatter plots.pdf”, and “grad_scatter plots.pdf”.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">iwalk</span>(all_plots, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> {</span>
<span id="cb30-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pdf</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(.y, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_scatterplots.pdf"</span>))</span>
<span id="cb30-3">  </span>
<span id="cb30-4">})</span></code></pre></div>
</div>
</section>
<section id="saving-all-plots-separately" class="level3">
<h3 class="anchored" data-anchor-id="saving-all-plots-separately">Saving all plots separately</h3>
<p>All plots can be saved separately instead of combined in a single document. This might be necessary if you want to insert the plots into some larger document later. We’ll want to use the names of both the outer and inner lists to appropriately identify each plot we save. I decided to do this by looping through the all_plots list and the names of the list via <code>imap()</code> to make the file names in a separate step. This time I’m going to save these as PNG files so use .png at the end of the file name. The result is a list of lists, so I flatten this into a single list via flatten(). If I were to use flatten() earlier in the process I’d lose the names of the outer list. This process of combining names prior to flattening should be simplified once the proposed flatten_names() function is added to purrr.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1">plotnames <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">imap</span>(all_plots, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(.y, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(.x), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".png"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb31-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">flatten</span>()</span></code></pre></div>
</div>
<p>Once the file names are created I can loop through all the file names and plots simultaneously with walk2() and save things via ggsave(). The height and width of each output file can be set as needed in ggsave(). You can see I flattened the nested list of plots into a single list to use in walk2().</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">walk2</span>(plotnames,</span>
<span id="cb32-2">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">flatten</span>(all_plots),</span>
<span id="cb32-3">      <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggsave</span>(</span>
<span id="cb32-4">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filename =</span> .x,</span>
<span id="cb32-5">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">plot =</span> .y,</span>
<span id="cb32-6">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>,</span>
<span id="cb32-7">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span></span>
<span id="cb32-8">      ))</span></code></pre></div>
</div>
</section>
<section id="combining-plots" class="level3">
<h3 class="anchored" data-anchor-id="combining-plots">Combining plots</h3>
<p>Another way to get a set of plots together is to combine them into one plot. How useful this is will depend on how many plots you have per set. This option is a lot like faceting, except we didn’t reshape our data set to allow the use faceting. I like the package cowplot function plot_grid() for quickly combining multiple plots into one. A list of plots can be passed via the plotlist argument.</p>
</section>
<section id="heres-what-that-looks-like-for-the-first-response-variable-elev." class="level3">
<h3 class="anchored" data-anchor-id="heres-what-that-looks-like-for-the-first-response-variable-elev.">Here’s what that looks like for the first response variable, elev.</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1">cowplot<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_grid</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">plotlist =</span> all_plots[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]])</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://bb1464.github.io/oluwafemi-oyedele/blogs/funtionalProgramming/functions_files/figure-html/unnamed-chunk-21-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>We can use a loop to combine the plots for each response variable sub-list. The result could then be saved using any of the approaches shown above. If you have many subplots per combined plot you likely will want to save the plots at a larger size so the individual plots can be clearly seen.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1">response_plots <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(all_plots, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> cowplot<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_grid</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">plotlist =</span> .x))</span>
<span id="cb34-2">response_plots</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$elev</code></pre>
</div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://bb1464.github.io/oluwafemi-oyedele/blogs/funtionalProgramming/functions_files/figure-html/unnamed-chunk-22-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>
$resp</code></pre>
</div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://bb1464.github.io/oluwafemi-oyedele/blogs/funtionalProgramming/functions_files/figure-html/unnamed-chunk-22-2.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>
$grad</code></pre>
</div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://bb1464.github.io/oluwafemi-oyedele/blogs/funtionalProgramming/functions_files/figure-html/unnamed-chunk-22-3.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>To learn more on functional programming in R you can look at Jenny Bryan blog post on functional programming <a href="https://jennybc.github.io/purrr-tutorial/"><strong>here</strong></a></p>


</section>
</section>

 ]]></description>
  <category>123</category>
  <category>Second Tag</category>
  <guid>https://bb1464.github.io/oluwafemi-oyedele/blogs/funtionalProgramming/functions.html</guid>
  <pubDate>Wed, 07 Jun 2023 05:00:00 GMT</pubDate>
</item>
</channel>
</rss>
